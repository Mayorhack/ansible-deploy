---
- hosts: hng
  become: yes

  vars:
    pg_password_file: /var/secrets/pg_pw.txt
    log_dir: /var/log/stage_5b
    repo_url: "https://github.com/hngprojects/hng_boilerplate_golang_web.git"
    app_dir: /opt/stage_5b
    user: hng
    postgres_user: postgres
    database_name: example_db
    db_user: example_user
    db_password: "securepassword123!"
    app_port: 3000
    go_version: "1.19" # Update to your Go version

  pre_tasks:
    - name: Create the hng user with sudo privileges
      user:
        name: "{{ user }}"
        state: present
        groups: sudo

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - git
        - wget
        - postgresql
        - postgresql-contrib
        - nginx

  tasks:
    - name: Install Go
      get_url:
        url: "https://golang.org/dl/go1.19.linux-amd64.tar.gz"
        dest: "/tmp/go1.19.linux-amd64.tar.gz"
        timeout: 60

    - name: Extract Go
      unarchive:
        src: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes

    - name: Set up Go environment variables
      lineinfile:
        path: /etc/profile
        line: "export PATH=$PATH:/usr/local/go/bin"
        create: yes
        state: present

    - name: Reload profile
      command: source /etc/profile

    - name: Clone the DevOps branch repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: devops
        force: yes
      become: yes
      become_user: "{{ user }}"

    - name: Ensure the application directory is owned by hng user
      file:
        path: "{{ app_dir }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: directory

    - name: Build the Golang application
      command: "go build -o myapp main.go"
      args:
        chdir: "{{ app_dir }}"

    - name: Ensure application is running on port 3000
      command: "nohup ./myapp > /dev/null 2>&1 &"
      args:
        chdir: "{{ app_dir }}"
        creates: "{{ app_dir }}/app.pid"

    - name: Configure PostgreSQL database
      become_user: postgres
      postgresql_db:
        name: "{{ database_name }}"
        state: present

    - name: Ensure PostgreSQL user is present
      become_user: postgres
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present

    - name: Save PostgreSQL admin credentials to a file
      copy:
        dest: "{{ pg_password_file }}"
        content: "postgres:{{ db_password }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0600"

    - name: Configure Nginx to reverse proxy to the application
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Ensure log directories exist
      file:
        path: "{{ log_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Configure logging for the application
      copy:
        dest: "{{ app_dir }}/logging.conf"
        content: |
          [loggers]
          keys=root

          [handlers]
          keys=stdoutHandler,stderrHandler

          [formatters]
          keys=formatter

          [logger_root]
          level=DEBUG
          handlers=stdoutHandler,stderrHandler

          [handler_stdoutHandler]
          class=StreamHandler
          level=INFO
          formatter=formatter
          args=(open('{{ log_dir }}/out.log', 'a'),)

          [handler_stderrHandler]
          class=StreamHandler
          level=ERROR
          formatter=formatter
          args=(open('{{ log_dir }}/error.log', 'a'),)

          [formatter_formatter]
          format=%(asctime)s - %(name)s - %(levelname)s - %(message)s

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
